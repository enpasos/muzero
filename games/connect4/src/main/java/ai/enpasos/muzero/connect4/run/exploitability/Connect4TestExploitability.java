/*
 *  Copyright (c) 2021 enpasos GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package ai.enpasos.muzero.connect4.run.exploitability;

import ai.djl.util.Pair;
import ai.enpasos.muzero.platform.agent.d_model.Inference;
import ai.enpasos.muzero.platform.agent.d_model.service.ModelService;
import ai.enpasos.muzero.platform.agent.e_experience.Game;
import ai.enpasos.muzero.platform.common.MuZeroException;
import ai.enpasos.muzero.platform.config.MuZeroConfig;
import ai.enpasos.muzero.platform.environment.OneOfTwoPlayer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static ai.enpasos.muzero.platform.common.Functions.f2d;
import static ai.enpasos.muzero.platform.config.PlayTypeKey.PLAYOUT;

@Slf4j
@Component
public class Connect4TestExploitability {

    @Autowired
    MuZeroConfig config;

    @Autowired
    Inference inference;

    @Autowired
    ModelService modelService;


    public GameTree prepareGameTree() {
        return new GameTree(config);
    }

    public Pair<Double, Double> exploitability(int epoch, GameTree gameTree, boolean afterDecision) {
        config.setPlayTypeKey(PLAYOUT);
        try {
            modelService.loadLatestModel(epoch).get();
        } catch (InterruptedException | ExecutionException e) {
            throw new MuZeroException(e);
        }

        return new Pair(
                exploitability(epoch, gameTree, afterDecision, false),
                exploitability(epoch, gameTree, afterDecision, true)
        );

    }

    private double exploitability(int epoch, GameTree gameTree, boolean afterDecision, boolean withMCTS) {
        double exploitability;
        modelDecisions(  withMCTS, gameTree, afterDecision);
        // now exploit
        gameTree.propagateBestExploitableValueBottomUp(OneOfTwoPlayer.PLAYER_A);
        gameTree.propagateBestExploitableValueBottomUp(OneOfTwoPlayer.PLAYER_B);
        exploitability = (gameTree.rootNode.bestExploitableValuePlayerA + gameTree.rootNode.bestExploitableValuePlayerB) / 2.0;
        return exploitability;
    }

    public double exploitability(int epoch,boolean withMCTS,  boolean afterDecision) {
        config.setPlayTypeKey(PLAYOUT);
        try {
            modelService.loadLatestModel(epoch).get();
        } catch (InterruptedException | ExecutionException e) {
            throw new MuZeroException(e);
        }

        GameTree gameTree = prepareGameTree();
   //     boolean withMCTS = false;
        modelDecisions( withMCTS, gameTree, afterDecision);

        // now exploit
        gameTree.propagateBestExploitableValueBottomUp(OneOfTwoPlayer.PLAYER_A);
        gameTree.propagateBestExploitableValueBottomUp(OneOfTwoPlayer.PLAYER_B);

        //  gameTree.rootNode.fillExpectedValueForExploiter(OneOfTwoPlayer.PLAYER_A);
        //  gameTree.rootNode.fillExpectedValueForExploiter(OneOfTwoPlayer.PLAYER_B);

     //   gameTree.rootNode.findDifferenceBetweenModelAndBestPolicy();

     //   gameTree.informOn(List.of(1));

//        gameTree.informOn(List.of(1, 7, 3, 6, 8, 2, 4, 0, 5));
//        gameTree.informOn(List.of(1, 7, 3, 6, 8, 2, 4, 0));
//        gameTree.informOn(List.of(1, 7, 3, 6, 8, 2, 4));
//        gameTree.informOn(List.of(1, 7, 3, 6, 8, 2));
//        gameTree.informOn(List.of(1, 7, 3, 6, 8));
//        gameTree.informOn(List.of(1, 7, 3, 6));
//        gameTree.informOn(List.of(1, 7, 3));
//        gameTree.informOn(List.of(1, 7));
//        gameTree.informOn(List.of(1));

        double exploitability = (gameTree.rootNode.bestExploitableValuePlayerA + gameTree.rootNode.bestExploitableValuePlayerB) / 2.0;
        return exploitability;

    }

    private void modelDecisions( boolean withMCTS, GameTree gameTree, boolean afterDecision) {
        Set< DNode> allNodesAModelDecisionIsNeededFor = new HashSet<>();
        gameTree.rootNode.collectAllNodes(allNodesAModelDecisionIsNeededFor, false);
        List<DNode> nodesList = new ArrayList<>(allNodesAModelDecisionIsNeededFor);

        List<Game> games =  nodesList.stream().map(n -> n.game).collect(Collectors.toList());

        if (afterDecision) {
            int[] actions = inference.aiDecisionForGames(games, withMCTS, -1);
            IntStream.range(0, actions.length).forEach(i -> {
                DNode node = nodesList.get(i);
                node.modelPolicy[actions[i]] = 1.0;
            });
            gameTree.rootNode.fillModelPolicies(nodesList);
        } else {
            List<float[]> policyValueList = inference.policyValuesFromPlanning( withMCTS, games);
            IntStream.range(0, policyValueList.size()).forEach(i -> {
                DNode node = nodesList.get(i);
                node.modelPolicy = f2d(policyValueList.get(i));
            });
        }
    }
}
