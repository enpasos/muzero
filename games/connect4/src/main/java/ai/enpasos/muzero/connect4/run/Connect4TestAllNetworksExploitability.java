/*
 *  Copyright (c) 2021 enpasos GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package ai.enpasos.muzero.connect4.run;

import ai.djl.util.Pair;
import ai.enpasos.muzero.platform.config.MuZeroConfig;
import ai.enpasos.muzero.connect4.run.exploitability.GameTree;
import ai.enpasos.muzero.connect4.run.exploitability.Connect4TestExploitability;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Map;
import java.util.TreeMap;

@Slf4j
@SuppressWarnings("squid:S106")
@Component
public class Connect4TestAllNetworksExploitability {
    @Autowired
    MuZeroConfig config;

    @Autowired
    Connect4TestExploitability test;


    @SuppressWarnings({"squid:S125", "CommentedOutCode"})
    public void run() {


        int start = 1; // 288;
        int stop = 288; // 288;

        boolean afterDecision = false;

       // config.setOutputDir("./memory/connect4-without-exploration/");
        //config.setOutputDir("./memory/connect4-with-exploration/");

        Map<Integer, Pair<Double, Double>> map = new TreeMap<>();
        GameTree gameTree = test.prepareGameTree();

        for (int epoch = start; epoch <= stop; epoch++) {
            System.out.println("epoch: " + epoch);
            map.put(epoch, test.exploitability(epoch, gameTree, afterDecision));
        }


        System.out.println("epoch;withoutMCTS;withMCTS");
        for (Map.Entry<Integer, Pair<Double, Double>> entry : map.entrySet()) {
            Pair<Double, Double> result = entry.getValue();
            System.out.println(entry.getKey() + ";" + result.getKey() + ";" + result.getValue());
        }


    }

}
