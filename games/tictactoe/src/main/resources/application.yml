logging:
  file.name: logs/muzero-tictactoe.log
  pattern:
    console: "%d %-5level %logger{0} : %msg%n"
    file: "%d %-5level [%thread] %logger : %msg%n"
  level:
    root: WARN
    ai.enpasos: DEBUG


muzero:
  activeGame: TICTACTOE
  run: train
  games:
    TICTACTOE:
      modelName: MuZero-TicTacToe
      gameClassName: ai.enpasos.muzero.tictactoe.config.TicTacToeGame
      actionClassName: ai.enpasos.muzero.tictactoe.config.TicTacToeAction
      playerMode: TWO_PLAYERS
      valueHeadType: EXPECTED # DISTRIBUTION
      networkWithRewardHead: false
      withRewardHead: false
      values: [ -1,0,1 ]
      numObservationLayers: 3
      numActionLayers: 1
      squeezeChannelRatio: 16  # on squeeze and excitation (SE) block
      numHiddenStateChannels: 5

      numberOfTrainingStepsPerEpoch: 40

      # windowValueSelfconsistencySize: 5000 <- postponed

      numUnrollSteps: 5
      tdSteps: 9 # size * size
      discount: 1.0
      weightDecay: 0.0001
      lrInit: 0.0001
      absorbingStateDropToZero: false # faster for integration test

      numberTrainingStepsOnStart: 0

      knownBoundsType: FROM_VALUES

      inferenceDeviceType: GPU
      outputDir: ./memory/tictactoe/
      numEpisodes: 1
      size: 3
      maxMoves: 9  # size*size
      boardHeight: 3 # size
      boardWidth: 3 # size
      actionSpaceSize: 9  # size*size

      # without symmetry usage
      # symmetryType: NONE
      # batchSize: 2048

      # using the square symmetry of the board
      symmetryType: SQUARE
      batchSize: 256

      numParallelGamesPlayed: 1000
      gameBufferWritingFormat: ZIPPED_PROTOCOL_BUFFERS # alternative: ZIPPED_JSON

      # Gumbel MuZero parameters
      initialGumbelM: 4
      cVisit: 10  # 50 in paper
      cScale: 1.0  # 1.0 in paper

      numSimulations: 20


      numResiduals: 8
      broadcastEveryN: 4
      numChannels: 256
      numBottleneckChannels: 128

      valueLossWeight: 1.0

      # dirichlet noise on root node helps to explore the game tree where the policy is temporarily underestimating some moves
      # dirichlet noise is added before mcts
      rootDirichletAlpha: 1.0
      rootExplorationFraction: 0.25

      # temperatureRoot applies a temperature to the policy target after mcts and after storing it in game statistics but
      # before drawing the action from the policy target (a little different from the paper)
      # it helps to explore the game tree where the policy rules out bad moves and makes the agent blind to what could happen after such a move
      temperatureRoot: 2.0


      windowSize: 1000
      numberOfTrainingSteps: 2000




