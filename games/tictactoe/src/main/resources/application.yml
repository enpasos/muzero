logging:
  file.name: logs/muzero-tictactoe.log
  pattern:
    console: "%d %-5level %logger{0} : %msg%n"
    file: "%d %-5level [%thread] %logger : %msg%n"
  level:
    root: WARN
    ai.enpasos: DEBUG
#ai:
#  djl:
#    logging:
#      level: debug


muzero:
  activeGame: TICTACTOE
  run: train
  games:
    TICTACTOE:
      modelName: MuZero-TicTacToe
      gameClassName: ai.enpasos.muzero.tictactoe.config.TicTacToeGame
      actionClassName: ai.enpasos.muzero.tictactoe.config.TicTacToeAction
      playerMode: TWO_PLAYERS
      valueHeadType: EXPECTED # DISTRIBUTION
      networkType: CON  # CON or FC
      networkWithRewardHead: false
      withRewardHead: false
      values: [ -1,0,1 ]
      numObservationLayers: 3
      numActionLayers: 1


      numberOfTrainingStepsPerEpoch: 40

      numUnrollSteps: 5

      discount: 1.0
      weightDecay: 0.0001
      lrInit: 0.0001
      absorbingStateDropToZero: false # faster for integration test

      # numberTrainingStepsOnStart: 0

      knownBoundsType: FROM_VALUES

      inferenceDeviceType: GPU
      outputDir: ./memory/tictactoe/
      size: 3
      maxMoves: 9  # size*size
      boardHeight: 3 # size
      boardWidth: 3 # size
      actionSpaceSize: 9  # size*size

      # without symmetry usage
      # symmetryType: NONE
      # batchSize: 2048

      # using the square symmetry of the board
      symmetryType: SQUARE
      batchSize: 256

      gameBufferWritingFormat: ZIPPED_PROTOCOL_BUFFERS # alternative: ZIPPED_JSON

      # Gumbel MuZero parameters
      initialGumbelM: 4
      cVisit: 20  # 50 in paper
      cScale: 1.0  # 1.0 in paper

      numResiduals: 6
      broadcastEveryN: 8  # out of range here

      numResidualsRepresentation: 6
      broadcastEveryNRepresentation: 8  # out of range here

      numResidualsGeneration: 6    #
      broadcastEveryNGeneration: 8 # out of range here

      numChannels: 256
      numBottleneckChannels: 128

      valueLossWeight: 1

      numberOfTrainingSteps: 10000


      windowSizeStart: 10000
      windowSizeIsDynamic: false #
      # windowSizeExponent: 0.8  # (sub)linear scaling of window size
      # windowSizeSlope: 0.5


      # numSimMin: 4
      # numSimWindow: 4
      # numSimMax: 100
      # numSimThreshold: 0.001

      numChannelsHiddenLayerSimilarity: 250
      numChannelsOutputLayerSimilarity: 500

      playTypes:
        PLAYOUT:
          forTraining: false
          numSimulations: 20
          rootExplorationFraction: 0.0  # 0.0 means switched off
          temperatureRoot: 0.0
          gumbelActionSelection: false
        HYBRID:
          forTraining: true
          numEpisodes: 1
          numParallelGamesPlayed: 500
          tdSteps: 9 # 9 # size * size
          forTdStep0ValueTraining: false
          forTdStep0PolicyTraining: true
          numSimulations: 20
          numSimulationsHybrid: 20

          # dirichlet noise on root node helps to explore the game tree where the policy is temporarily underestimating some moves
          # dirichlet noise is added before mcts
          rootDirichletAlpha: 1.2
          rootExplorationFraction: 0.25  # 0.0 means switched off

          # temperatureRoot applies a temperature to the policy target after mcts and after storing it in game statistics but
          # before drawing the action from the policy target (different from the paper)
          # it helps to explore the game tree where the policy rules out bad moves and makes the agent blind to what could happen after such a move
          temperatureRoot: 5.0
          gumbelActionSelection: false

        BEST_EFFORT:
          forTraining: true
          numEpisodes: 1
          numParallelGamesPlayed: 500
          tdSteps: 9 # 9 # size * size
          numSimulations: 20
          gumbelActionSelection: true
          # dirichlet noise on root node helps to explore the game tree where the policy is temporarily underestimating some moves
          # dirichlet noise is added before mcts
          rootDirichletAlpha: 1.2
          rootExplorationFraction: 0.25  # 0.0 means switched off



