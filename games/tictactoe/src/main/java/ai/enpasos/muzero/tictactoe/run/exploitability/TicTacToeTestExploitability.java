/*
 *  Copyright (c) 2021 enpasos GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package ai.enpasos.muzero.tictactoe.run.exploitability;

import ai.enpasos.muzero.platform.agent.d_model.Inference;
import ai.enpasos.muzero.platform.agent.e_experience.Game;
import ai.enpasos.muzero.platform.config.MuZeroConfig;
import ai.enpasos.muzero.platform.environment.OneOfTwoPlayer;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static ai.enpasos.muzero.platform.config.PlayTypeKey.PLAYOUT;

@Slf4j
@Component
public class TicTacToeTestExploitability {

    @Autowired
    MuZeroConfig config;


    @Autowired
    Inference inference;



    public double exploitability(int epoch, boolean withMCTS) {
        config.setPlayTypeKey(PLAYOUT);
        GameTree gameTree = new GameTree(config);

        Set< DNode> allNodesAModelDecisionIsNeededFor = new HashSet<>();
        gameTree.rootNode.collectAllNodes(allNodesAModelDecisionIsNeededFor, false);
        List<DNode> nodesList = new ArrayList<>(allNodesAModelDecisionIsNeededFor);

        List<Game> games =  nodesList.stream().map(n -> n.game).collect(Collectors.toList());
        int[] actions = inference.aiDecisionForGames(games, withMCTS, epoch);

        IntStream.range(0, actions.length).forEach(i -> {

            DNode node = nodesList.get(i);

            node.modelPolicy[actions[i]] = 1.0;
        });
        gameTree.rootNode.fillModelPolicies(nodesList);

        gameTree.rootNode.findDifferenceBetweenModelAndBestPolicy();

        gameTree.rootNode.fillExpectedValueGivenPlayerAgainsBestPolicy(OneOfTwoPlayer.PLAYER_A);

        double vA = gameTree.rootNode.getExpectedValue();
        gameTree.rootNode.fillExpectedValueGivenPlayerAgainsBestPolicy(OneOfTwoPlayer.PLAYER_B);

        double vB = gameTree.rootNode.getExpectedValue();
        double exploitability = (vA + vB) / 2.0;
        return exploitability;
    }
}
