/*
 *  Copyright (c) 2021 enpasos GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package ai.enpasos.muzero.tictactoe.run.exploitability;

import ai.enpasos.muzero.platform.agent.d_model.Inference;
import ai.enpasos.muzero.platform.agent.d_model.service.ModelService;
import ai.enpasos.muzero.platform.agent.e_experience.Game;
import ai.enpasos.muzero.platform.common.MuZeroException;
import ai.enpasos.muzero.platform.config.MuZeroConfig;
import ai.enpasos.muzero.platform.environment.OneOfTwoPlayer;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.math3.util.Pair;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static ai.enpasos.muzero.platform.common.Functions.toDouble;
import static ai.enpasos.muzero.platform.config.PlayTypeKey.PLAYOUT;

@Slf4j
@Component
public class TicTacToeTestValueMetric {

    @Autowired
    MuZeroConfig config;

    @Autowired
    Inference inference;

    @Autowired
    ModelService modelService;


    public GameTree prepareGameTree() {
        return new GameTree(config);
    }

    public double valueMetric(int epoch, GameTree gameTree, boolean leafsOnly) {
        config.setPlayTypeKey(PLAYOUT);
        try {
            modelService.loadLatestModel(epoch).get();
        } catch (InterruptedException | ExecutionException e) {
            throw new MuZeroException(e);
        }

         modelValues(epoch,  gameTree, leafsOnly );


         gameTree.rootNode.collectValueMetric(leafsOnly);
        return gameTree.rootNode.valueMetric;
    }

    private void modelValues(int epoch,  GameTree gameTree, boolean leafsOnly ) {

        Set< DNode> allNodesAModelValueIsNeededFor = new HashSet<>();
        if (leafsOnly) {
            allNodesAModelValueIsNeededFor.addAll(gameTree.terminalGameNodes);
        } else {
            gameTree.rootNode.collectAllNodes(allNodesAModelValueIsNeededFor, true);
        }
        List<DNode> nodesList = new ArrayList<>(allNodesAModelValueIsNeededFor);

        List<Game> games =  nodesList.stream().map(n -> n.game).collect(Collectors.toList());


        List<Pair<Double, Integer>> a = inference.aiDecision(false, games);
        IntStream.range(0, a.size()).forEach(i -> {
            Pair<Double, Integer> b = a.get(i);
            DNode node = nodesList.get(i);
            node.modelValue = b.getFirst();
        });
        gameTree.rootNode.fillModelValues(nodesList, leafsOnly);

    }



}
